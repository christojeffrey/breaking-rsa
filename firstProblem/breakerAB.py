# for case A and B
import gmpy2
n = 20872024835281564490204439901091798713500424952861082432620354844947624761575746996410644735034513568552219555543509689943103225725205260151363960723546365929315534757760759929343741413800802439846126331156771834588075378467527677024870947873795846216386102167874329568254989916383383409182011708647940309654143199914122632307921715928817352509751022549675941760911407669466569170074681077827619151585084334923985234521100196884422774884434962231596094424725764094750363185836226740251208618430979337593107557027592867372076821731257724249442188276619907921990911332372194855947675880882563951624455686855977546704601

c = 14951154818333373041112158308575355865893484819636299082681470260514292789377177199459475558811520430848550926872260955066322081342849635498946007138082301084920449418411984761451090034742819026295139141186339053280974587394409234102717238250603390459602325670574525522501485015832088079045392964592488425720753094168592083987433580017372183950467045753426367671628910132459631171724110656640354090328063299532135848870012739371444067907607206228565384540022461313539410548727037159807377715369841300972617880756736759077107791689973163007299659493292493225521642409519223734696088757676537845938225258281470723630068
# print n in decimal
# floor it
root_n = gmpy2.isqrt(n)

root_n = (root_n)

while True:
    # divide n by root_n
    if n % root_n == 0:
        p = root_n
        q = n // root_n
        break
    root_n += 1

print("p: ", p)
print("q: ", q)

from Crypto.Util.number import *
if(p == q):
    tot = (p-1) * (q)
else:
    tot = (p-1) * (q-1)
e = 65537
d = pow(e, -1, tot)
cipherText = int(c)
m = pow(cipherText, d, n)
plainText = long_to_bytes(m).decode()
print(plainText)